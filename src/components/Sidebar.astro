---
import { 
  BookOpen,
  Clock, 
  Users,
  Calendar,
  Target,
  Rocket,
  LogOut,
  Palette,
  Box,
  UserPlus,
  Play,
  Video,
  ChevronRight,
  FileText,
  User,
  Film
} from 'lucide-react';

const navigation = [
  {
    name: 'Leadership Docs',
    icon: FileText,
    sections: [
      { 
        name: 'Day 1', 
        href: '/docs/leadership/day-1',
        matchPaths: ['/docs/leadership/day-1', '/docs/leadership/day-1/leadership-blueprint', '/docs/leadership/day-1/30-60-90-plan'],
        Icon: Clock
      },
      {
        name: 'Week 1-2',
        href: '/docs/leadership/week-1-2',
        matchPaths: ['/docs/leadership/week-1-2', '/docs/leadership/week-1-2/getting-to-know-you'],
        Icon: Users
      },
      {
        name: 'Month 1',
        href: '/docs/leadership/month-1',
        matchPaths: ['/docs/leadership/month-1', '/docs/leadership/month-1/designer-levels-titles', '/docs/leadership/month-1/level-competencies'],
        Icon: Calendar
      },
      {
        name: 'Quarter 1',
        href: '/docs/leadership/quarter-1',
        matchPaths: ['/docs/leadership/quarter-1', '/docs/leadership/quarter-1/self-evaluation', '/docs/leadership/quarter-1/short-term-growth-exercise'],
        Icon: Target
      },
      {
        name: 'Quarter 2',
        href: '/docs/leadership/quarter-2',
        matchPaths: ['/docs/leadership/quarter-2'],
        Icon: Rocket
      },
      {
        name: 'Departure',
        href: '/docs/leadership/departure',
        matchPaths: ['/docs/leadership/departure'],
        Icon: LogOut
      }
    ]
  },
  {
    name: 'Team Docs',
    icon: User,
    sections: [
      {
        name: 'Design Team',
        href: '/docs/team/design',
        matchPaths: ['/docs/team/design'],
        Icon: Palette
      },
      {
        name: 'Product Team',
        href: '/docs/team/product',
        matchPaths: ['/docs/team/product'],
        Icon: Box
      },
      {
        name: 'Recruiting',
        href: '/docs/team/recruiting',
        matchPaths: ['/docs/team/recruiting'],
        Icon: UserPlus
      }
    ]
  },
  {
    name: 'Videos',
    icon: Film,
    sections: [
      {
        name: 'Portfolio Reviews',
        href: '/docs/videos/portfolio-reviews',
        matchPaths: ['/docs/videos/portfolio-reviews'],
        Icon: Play
      },
      {
        name: '1 on 1s',
        href: '/docs/videos/one-on-ones',
        matchPaths: ['/docs/videos/one-on-ones'],
        Icon: Video
      }
    ]
  }
];

const { currentPath } = Astro.props;

// Determine which sections should be expanded based on the current path
const expandedSections = navigation.map(category => 
  category.sections.some(section => section.matchPaths.includes(currentPath))
);
---

<aside class="sidebar">
  <div class="sidebar-header">
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center">
        <span class="sidebar-title">Open Design Docs</span>
      </div>
    </div>
    <div class="relative">
      <input 
        type="text" 
        placeholder="Search docs..." 
        class="sidebar-search"
      />
    </div>
  </div>
  
  <nav class="sidebar-nav">
    {navigation.map((category, index) => (
      <div class="sidebar-category">
        <div 
          class="sidebar-category-header"
          data-category={index}
        >
          <div class="sidebar-category-title">
            <category.icon className="sidebar-category-icon" />
            <span>{category.name}</span>
          </div>
          <ChevronRight className={`sidebar-category-arrow ${expandedSections[index] ? 'expanded' : ''}`} />
        </div>
        <div class={`sidebar-links ${!expandedSections[index] ? 'collapsed' : ''}`}>
          {category.sections.map((section) => (
            <a
              href={section.href}
              class={`sidebar-link ${section.matchPaths.includes(currentPath) ? 'active' : ''}`}
            >
              <section.Icon className={`sidebar-icon ${section.matchPaths.includes(currentPath) ? 'active' : ''}`} />
              <span>{section.name}</span>
            </a>
          ))}
        </div>
      </div>
    ))}
  </nav>

  <div class="sidebar-footer">
    <p class="sidebar-footer-text">
      I have attempted to remove all confidential or personal information. If you have any concerns, please contact me.
    </p>
  </div>
</aside>

<script>
  // Load expanded state from localStorage
  const loadExpandedState = () => {
    try {
      const stored = localStorage.getItem('sidebarExpandedSections');
      return stored ? JSON.parse(stored) : {};
    } catch (e) {
      return {};
    }
  };

  // Save expanded state to localStorage
  const saveExpandedState = (state) => {
    try {
      localStorage.setItem('sidebarExpandedSections', JSON.stringify(state));
    } catch (e) {
      console.error('Failed to save sidebar state:', e);
    }
  };

  // Initialize expanded state
  let expandedState = loadExpandedState();

  // Handle category expansion
  document.querySelectorAll('.sidebar-category-header').forEach((header, index) => {
    const arrow = header.querySelector('.sidebar-category-arrow');
    const links = header.nextElementSibling;
    
    // Set initial state
    if (expandedState[index]) {
      arrow?.classList.add('expanded');
      links?.classList.remove('collapsed');
    }

    // Only toggle when clicking the header itself
    header.addEventListener('click', (e) => {
      // Ensure we're clicking the header and not a child link
      if (e.target.closest('.sidebar-link')) return;
      
      const isExpanded = arrow?.classList.toggle('expanded');
      links?.classList.toggle('collapsed');
      
      // Update stored state
      expandedState[index] = isExpanded;
      saveExpandedState(expandedState);
    });
  });
</script>